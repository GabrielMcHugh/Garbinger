import React, { Component } from 'react';

class SushiTray extends Component {
	constructor(props) {
		super(props);
		this.state = {
			strokeColour: '#ffd166',
			fillColour: 'white',
			modalData: {
				className: 'SushiTray',
				disposalDescription: 'Toss it into the recyling',
				svgLink: 'SushiTray',
			}
		}
	}

	changeColour = () => {
		let strokeColour = this.state.strokeColour;
		let fillColour = this.state.fillColour;
    	this.setState({strokeColour: fillColour, fillColour: strokeColour});
  	}

    revertColour = () => {
    	let strokeColour = this.state.strokeColour;
		let fillColour = this.state.fillColour;
        this.setState({strokeColour: fillColour, fillColour: strokeColour});
    }

    addModalToDisplay = () => {
    	if (!this.state.modalFlag) {
    		this.props.onClick(this.state.modalData)
    		this.setState({modalFlag: true})
    		//keep the button highlighted
    	} else {//if its already been clicked,
    		this.props.onSecClick(this.state.modalData.className)
    		this.setState({modalFlag: false})
    	}
    }

    onEnterButton = () => {
    	if (!this.state.modalFlag) {
    		this.changeColour()
    	}
    }

    onLeaveButton = () => {
    	if (!this.state.modalFlag) {
    		this.revertColour()
    	}
    }

	render() {

	   return (
	     <svg onClick={() => this.addModalToDisplay()} onMouseEnter={this.onEnterButton} onMouseLeave={this.onLeaveButton} xmlns="http://www.w3.org/2000/svg" width="217" height="284" viewBox="0 0 217 284">
			  <g id="Group_188" data-name="Group 188" transform="translate(6084 -17834)">
			    <g id="Group_180" data-name="Group 180" transform="translate(-6083.621 17834.156)">
			      <g id="Ellipse_11" data-name="Ellipse 11" transform="translate(-0.379 -0.156)" fill={this.state.fillColour} stroke={this.state.strokeColour} stroke-width="5">
			        <circle cx="108.5" cy="108.5" r="108.5" stroke="none"/>
			        <circle cx="108.5" cy="108.5" r="106" fill="none"/>
			      </g>
			      <g id="sushi" transform="translate(32.999 47.566)">
			        <g id="Group_147" data-name="Group 147" transform="translate(19.274 74.791)">
			          <g id="Group_146" data-name="Group 146">
			            <path id="Path_58" data-name="Path 58" d="M69.257,303.132h-.083a2.909,2.909,0,1,0,0,5.817h.083a2.909,2.909,0,1,0,0-5.817Z" transform="translate(-66.265 -303.132)" fill={this.state.strokeColour}/>
			          </g>
			        </g>
			        <g id="Group_149" data-name="Group 149" transform="translate(25.503 106.199)">
			          <g id="Group_148" data-name="Group 148">
			            <path id="Path_59" data-name="Path 59" d="M90.673,411.115H90.59a2.909,2.909,0,0,0,0,5.817h.083a2.909,2.909,0,0,0,0-5.817Z" transform="translate(-87.681 -411.115)" fill={this.state.strokeColour}/>
			          </g>
			        </g>
			        <g id="Group_151" data-name="Group 151" transform="translate(79.096 104.89)">
			          <g id="Group_150" data-name="Group 150">
			            <path id="Path_60" data-name="Path 60" d="M274.923,406.615h-.083a2.909,2.909,0,1,0,0,5.817h.083a2.909,2.909,0,1,0,0-5.817Z" transform="translate(-271.931 -406.615)" fill={this.state.strokeColour}/>
			          </g>
			        </g>
			        <g id="Group_153" data-name="Group 153" transform="translate(55.099 100.6)">
			          <g id="Group_152" data-name="Group 152">
			            <path id="Path_61" data-name="Path 61" d="M192.423,391.866h-.083a2.909,2.909,0,1,0,0,5.817h.083a2.909,2.909,0,1,0,0-5.817Z" transform="translate(-189.431 -391.866)" fill={this.state.strokeColour}/>
			          </g>
			        </g>
			        <g id="Group_155" data-name="Group 155" transform="translate(0 0)">
			          <g id="Group_154" data-name="Group 154">
			            <path id="Path_62" data-name="Path 62" d="M142.5,70.285c-.188-.207-.382-.42-.57-.631a91.313,91.313,0,0,0,5.609-8.322,2.909,2.909,0,0,0-1.553-4.26,16.835,16.835,0,0,0-5.391-.79,32.018,32.018,0,0,0-12.545,2.761c-5.777-5.657-15.78-9.182-26.7-11.119a2.9,2.9,0,0,0-.65-.113A134.429,134.429,0,0,0,78.459,46h-.371c-.065,0-.129,0-.193,0-19.1.075-42.508,3.99-51.584,14.786a14.6,14.6,0,0,0-3.458,12.2,12.771,12.771,0,0,0,.41,1.666h0A11.779,11.779,0,0,0,26.346,79.6a26.041,26.041,0,0,0-.915,6.7A24.885,24.885,0,0,0,33.552,104.7C21,106.779,9.448,110.86,3.682,117.718a14.6,14.6,0,0,0-3.458,12.2,12.734,12.734,0,0,0,.41,1.665v0a11.781,11.781,0,0,0,3.083,4.95,26.053,26.053,0,0,0-.915,6.7A24.955,24.955,0,0,0,27.73,168.165H82.783a24.955,24.955,0,0,0,24.927-24.927,26.79,26.79,0,0,0-.2-3.22c4.306,2.973,9.122,4.3,15.256,4.3.188,0,.377,0,.568,0a2.908,2.908,0,0,0,2.845-2.524c.887-6.652-3.442-11.421-6.306-14.576-.188-.207-.382-.42-.57-.631a91.373,91.373,0,0,0,5.609-8.322,2.909,2.909,0,0,0-1.553-4.26,16.835,16.835,0,0,0-5.391-.79,32.013,32.013,0,0,0-12.545,2.761,29.2,29.2,0,0,0-6.624-4.733h6.613A24.955,24.955,0,0,0,130.337,86.31a26.8,26.8,0,0,0-.2-3.221c4.306,2.974,9.122,4.3,15.256,4.3.188,0,.377,0,.568,0a2.909,2.909,0,0,0,2.845-2.524C149.693,78.209,145.365,73.441,142.5,70.285Zm-44.291-17c1.934,7.393,3.707,16.3-1.489,26.428-3.054-.167-6.038-.394-8.824-.606-2.184-.166-4.2-.32-6.007-.425,1.83-7.4.77-13.838-.184-19.617a58.644,58.644,0,0,1-.9-7.223A126.268,126.268,0,0,1,98.21,53.283Zm-39.6,0a128.386,128.386,0,0,1,16.377-1.416,61.327,61.327,0,0,0,.981,8.148c.957,5.8,1.942,11.783-.079,18.571-2.265.086-4.985.293-8.021.524-2.033.155-4.169.317-6.362.459C56.167,69.383,56.844,60.644,58.609,53.279ZM29.352,74.044a13.31,13.31,0,0,1,7.879-3.9,2.909,2.909,0,1,0-.593-5.787A19.09,19.09,0,0,0,29.27,66.81a10.806,10.806,0,0,1,1.492-2.276c3.652-4.344,11.474-7.872,21.634-10.1a39.866,39.866,0,0,0,2.785,25.453c-1.482.05-2.969.079-4.446.079C38.876,79.965,31.707,77.974,29.352,74.044ZM6.724,130.972a13.312,13.312,0,0,1,7.879-3.9,2.909,2.909,0,1,0-.593-5.787,19.086,19.086,0,0,0-7.367,2.458,10.784,10.784,0,0,1,1.492-2.276c3.652-4.344,11.473-7.873,21.633-10.1a39.866,39.866,0,0,0,2.785,25.454c-1.482.05-2.969.079-4.446.079C16.248,136.894,9.079,134.9,6.724,130.972Zm76.059,31.376H27.73A19.131,19.131,0,0,1,8.62,143.238a19.575,19.575,0,0,1,.309-3.373c.554.235,1.126.46,1.731.664C15,142,20.7,142.711,28.108,142.711c6.072,0,12.182-.465,17.573-.876,3.872-.295,7.216-.55,9.576-.55h.12c2.351.008,5.645.259,9.452.548,5.389.41,11.5.875,17.565.875,8.405,0,14.7-.919,19.219-2.845a21.185,21.185,0,0,1,.28,3.374A19.132,19.132,0,0,1,82.783,162.347Zm-46.8-52.14q2.947-.456,6.072-.775c.03,0,.061,0,.091-.009,3.287-.332,6.705-.547,10.214-.632a61.336,61.336,0,0,0,.981,8.148c.957,5.8,1.942,11.783-.079,18.571-2.265.086-4.985.293-8.021.524-2.032.155-4.169.317-6.361.459C33.538,126.31,34.216,117.571,35.982,110.207Zm23.1,5.785a58.641,58.641,0,0,1-.9-7.223,126.217,126.217,0,0,1,17.4,1.441c1.934,7.393,3.707,16.3-1.489,26.429-3.054-.167-6.037-.394-8.824-.606-2.184-.166-4.2-.32-6.007-.425C61.093,128.213,60.033,121.771,59.079,115.992Zm43.463,5.446a2.909,2.909,0,0,0,3.96.563c1.661-1.179,6.475-2.867,11.034-2.97a33.667,33.667,0,0,1-3.838,5.122,2.909,2.909,0,0,0-.752,3.636,18,18,0,0,0,2.62,3.334c1.848,2.036,4.045,4.457,4.709,7.282a18.913,18.913,0,0,1-13.088-6.31,2.909,2.909,0,0,0-2.1-.9h-.018a2.908,2.908,0,0,0-2.107.923c-2.957,3.165-9.877,4.77-20.568,4.77q-.987,0-1.979-.017c4.2-9.735,3.129-18.4,1.463-25.468.947.214,1.878.438,2.786.677C93.3,114.355,99.483,117.59,102.542,121.439Zm2.87-16.019H81.672q-1.46-.3-2.948-.567a2.889,2.889,0,0,0-.659-.115,134.44,134.44,0,0,0-22.235-1.807h-.372c-.063,0-.125,0-.187,0-4.215.017-8.639.22-13.074.643A19.127,19.127,0,0,1,31.248,86.31a19.6,19.6,0,0,1,.309-3.373c.554.235,1.126.459,1.731.664,4.335,1.468,10.042,2.182,17.447,2.182,6.072,0,12.182-.465,17.573-.876,3.872-.295,7.217-.55,9.576-.55H78c2.351.008,5.645.259,9.451.548,5.389.41,11.5.875,17.565.875,8.4,0,14.7-.919,19.219-2.845a21.191,21.191,0,0,1,.28,3.374A19.132,19.132,0,0,1,105.411,105.419Zm24.4-30.252a2.909,2.909,0,0,0-2.1-.9H127.7a2.908,2.908,0,0,0-2.107.923c-2.957,3.165-9.877,4.77-20.568,4.77q-.987,0-1.979-.017c4.2-9.735,3.129-18.4,1.463-25.468.947.214,1.878.438,2.786.677,8.637,2.271,14.819,5.506,17.878,9.355a2.909,2.909,0,0,0,3.96.563c1.661-1.179,6.476-2.867,11.035-2.97a33.654,33.654,0,0,1-3.838,5.122,2.908,2.908,0,0,0-.752,3.636,17.98,17.98,0,0,0,2.62,3.334c1.848,2.036,4.045,4.457,4.709,7.282A18.914,18.914,0,0,1,129.815,75.167Z" transform="translate(0 -46.003)" fill={this.state.strokeColour}/>
			          </g>
			        </g>
			        <g id="Group_157" data-name="Group 157" transform="translate(41.902 17.863)">
			          <g id="Group_156" data-name="Group 156">
			            <path id="Path_63" data-name="Path 63" d="M147.051,107.415h-.083a2.909,2.909,0,1,0,0,5.817h.083a2.909,2.909,0,1,0,0-5.817Z" transform="translate(-144.059 -107.415)" fill={this.state.strokeColour}/>
			          </g>
			        </g>
			        <g id="Group_159" data-name="Group 159" transform="translate(48.131 49.272)">
			          <g id="Group_158" data-name="Group 158">
			            <path id="Path_64" data-name="Path 64" d="M168.466,215.4h-.083a2.909,2.909,0,0,0,0,5.817h.083a2.909,2.909,0,1,0,0-5.817Z" transform="translate(-165.474 -215.398)" fill={this.state.strokeColour}/>
			          </g>
			        </g>
			        <g id="Group_161" data-name="Group 161" transform="translate(101.724 47.963)">
			          <g id="Group_160" data-name="Group 160">
			            <path id="Path_65" data-name="Path 65" d="M352.717,210.9h-.083a2.909,2.909,0,0,0,0,5.817h.083a2.909,2.909,0,0,0,0-5.817Z" transform="translate(-349.725 -210.898)" fill={this.state.strokeColour}/>
			          </g>
			        </g>
			        <g id="Group_163" data-name="Group 163" transform="translate(77.727 43.672)">
			          <g id="Group_162" data-name="Group 162">
			            <path id="Path_66" data-name="Path 66" d="M270.217,196.148h-.083a2.909,2.909,0,1,0,0,5.817h.083a2.909,2.909,0,1,0,0-5.817Z" transform="translate(-267.225 -196.148)" fill={this.state.strokeColour}/>
			          </g>
			        </g>
			      </g>
			    </g>
			    <text id="Sushi_Tray" data-name="Sushi Tray" transform="translate(-5965 18106)" fill="#ffd166" font-size="32" font-family="AvenirNext-DemiBold, Avenir Next" font-weight="300"><tspan x="-73.12" y="0">Sushi Tray</tspan></text>
			  </g>
			</svg>
	    )
	}
};

export default SushiTray;